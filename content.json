{"pages":[{"title":"categories","text":"","link":"/categories/index.html"},{"title":"tag","text":"","link":"/tag/index.html"},{"title":"천천히 가더라도 꾸준하게, 어제보다 더 나은 내가 되자","text":"Slowly but Steadily, Better than Yesterday 최민우Career: 신입Phone: -Address: -E-mail: pong75491@gmail.comgithub: github.io/colorlion 핵심 역량Python을 활용한 KISA 취약점 분석,평가 방법 상세 가이드 자동화 경험JavaScript와 Bootstrap을 사용한 Frontend 개발AWS의 EC2와 RDS를 활용한 클라우드 서버 구축 및 배포SQL Server 및 MySQL 기반 데이터 베이스 구축 및 운영 학력 및 교육2021.10.05~2021.11.16 한국표준협회 AI 고급과정2017.09.01~2020.02.08 아주대학교 정보통신대학원(사이버보안전공)2016.08.02~2016.12.02 오라클 DB엔지니어 양성과정 자격증2022.01 AWS Certified Solutions Architect - Associate2021.12 인공지능 자격(전문가)2021.10 SQL 개발자(SQLD)2018.11 정보처리기사 Skill SetLanguage: Python, JavaScript, CDatabase: MySQL, Oracle, MS-SQLFramework: VueOS: CentOS, KaliLinux, UbuntuETC: Git 프로젝트2019.06.01~2020.02.29기계 학습을 이용한 새로운 공격 벡터를 안정적으로 탐지할 수 있는 고 정밀 침입 탐지 방법 개발기계 학습에 사용되는 데이터의 전처리 아파치 로그파일을 레이블 인코딩 혹은 원-핫 인코딩으로 전처리된 데이터를 출력하는 도구를 개발했습니다. Sklearn 패키지를 사용한 전처리 구현 Pandas 패키지를 사용한 데이터 구조화 2018.02.26~2018.10.25성북구 마을기록 아카이브 기반 활용 서비스 기획 연구사업사용자 일 평균 50명의 이벤트용 웹 서비스 구축 및 운영 성북구 마을기록 아카이브를 활용할 수 있는 시범사업으로 이벤트용 웹 페이지를 개발하고 배포했습니다. AWS EC2를 사용한 웹 서비스 인프라 구축 Apache Tomcat을 사용한 웹 서비스 배포 MySQL 데이터베이스 구축 및 운영 2017.09.01~2020.08.31‘빅데이터’ 분석 기반 한국사 권력 메커니즘데이터베이스 구축 및 운영 연구실 내 역사 데이터를 정형화해 저장하고 출력할 수 있는 데이터베이스를 구축하고 운영했습니다. MySQL을 사용한 테스트/MS-SQL을 사용한 서비스 서버 구축 테스트 서버와 서비스 서버를 분리해 데이터에 대한 일관성을 확보할 수 있었고 기존 데이터와 테스트 데이터간 오염을 막을수 있었습니다 데이터 클리닝 도구 개발 엑셀 파일로 된 데이터를 조건에 맞게 정형화된 데이터와 추가 작업이 필요한 데이터로 분할 해 엑셀파일로 제공하는 클리닝 도구를 개발했습니다. 정규표현식과 Pandas를 사용해 데이터 노이즈 제거 및 구조화 정형화된 데이터는 엑셀 파일과 SQL문으로 제공 데이터 출력용 SQL 개발 데이터베이스에 저장된 연도별 호적 데이터를 활용해 일반적인 형태의 족보를 출력할 수 있는 SQL을 개발했습니다. 재귀 쿼리를 사용해 결과를 tree구조로 출력 출력된 데이터는 엑셀파일로 제공 데이터베이스 입력 도구 개발 웹 서비스에 전처리된 엑셀 파일을 업로드하면 SQL문으로 변환해 데이터베이스 서버로 업로드 하는 도구를 개발했습니다. html과 JavaScript를 사용해 데이터 업로드용 웹 서비스 개발","link":"/about/index.html"},{"title":"archives","text":"","link":"/archives/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"17회 정보보안기사 실기 후기","text":"Prologue시험을 치는 날짜는 2021년 5월 29일 9시 30분에 시험을 치렀습니다. 결론부터 말하자면 불합격 한 것 같습니다. 이번 시험은 다른 시험과는 다르게 법률 관련 문제가 많이 출제 된 것 같습니다. 대략 배점으론 40점 정되 되는 듯 했습니다. 저는 안타깝게도 법률쪽은 개인정보보호법, ISMS, 가명처리 위주로 준비했기 때문에 이번 시험은 문제운이 안좋았다고 변명을… 생각나는 문제들CVE 관련 문제CVE가 직접적으로 나오진 않았지만 CVE를 관리하는(?) 기관인 MITRE 관련 문제가 두문제 출제되었습니다. 가명처리가명처리의 경우 출제될 것 같아서 열심히 준비했습니다. 개인정보호법단답형에도 출제되고 서술형에도 출제된 것이 특이하다면 특이했습니다. 정보통신망법주로 용어를 묻는 문제가 나왔습니다. 노트에 추가할 내용들기존 노트에 정리해둔 내용은 기술적 고려사항을 위주로 정리해 두었는데 법률을 더해야 할 것 같습니다. 법률은 모든 것을 다 할 수는 없으니 용어와 keyword 중심으로 정리해 둘 예정입니다. 다음 보안기사 시험 전에 준비할 것 들이번 시험은 준비해던게 나오지 않았던 소위 맞지 않았던 시험이였습니다. 상당히 많이 준비했는데 떨어지게 되어 좀 씁쓸하지만 일년 내내 보안기사만 할 수 없기 때문에 다른 자격증을 준비할 예정입니다. SQLD(시험 준비가 가능하다면 SQLP 까지) Amazon AWS Certified Solutions Architect MicroSoft Azure AZ-500","link":"/2021/05/30/17%ED%9A%8C-%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88%EA%B8%B0%EC%82%AC-%EC%8B%A4%EA%B8%B0-%ED%9B%84%EA%B8%B0/"},{"title":"2021년 10월 SQLD 합격 후기","text":"진작에 올려놨어야 했을 글들인데 한번에 몰아서 하려니까 힘들긴 하군요 역시 미루면 안된다는 걸 느끼고 있습니다. 공부 기간은 기존에 해놨던 공부를 정리하는 식으로 진행해서 약 4~5일 정도 소요 되었습니다. SQLP 자격증도 취득해야 하기 때문에 기본기인 SQLD를 확실하게 정리해두어 SQLP는 조금이라도 편하게 공부할 수 있도록 준비했습니다. 시험 개요 시험 시간: 90분배점:100점 데이터 모델링의 이해: 20점 SQL 기본 및 활용: 80점합격 기준: 60점 이상 들어가기 전에저는 대학원에서 사이버보안을 전공했으며, 연구실에서 데이터베이스 구축 및 운영 경험이 있는 상태로 준비했습니다. 비교적 쉽게 합격할 수 있었습니다. 공부 방법책영진닷컴의 이기적 SQL 개발자를 사용했습니다. 개념이 깔끔하게 정리되어 있고, 교제에 해당하는 강의까지 들을 수 있었습니다. 정리추후에 SQLP도 취득할 계획이 있어 꼼꼼하게 정리했습니다.개념을 정리하면서 필요한 SQL문을 직접 사용해 보고 옵티마이저가 어떻게 실행계획을 세우는지까지 정리해 두었습니다. 이후에 교재에 있는 기출문제를 반복해서 풀고 틀린 부분에 대한 개념을 보강한 뒤 시험을 봤습니다.","link":"/2022/02/01/2021%EB%85%84-10%EC%9B%94-SQLD-%ED%95%A9%EA%B2%A9-%ED%9B%84%EA%B8%B0/"},{"title":"AWS Solutions Architect Associate 합격 후기","text":"2022년 1월 24일 AWS SAA-C02에 합격했습니다인증서가 국내 자격증과는 다른 맛이 있군요. 역시 비싼 값을 하는건가? 싶네요. 내가 처한 환경과 비용을 생각해 최선의 AWS 솔루션을 찾아내는 것, 이게 SAA-C02를 얻기 위한 시작이라고 할 수 있겠네요. 참고로 자격증은 3년의 유효기간이 있고, 이후엔 재취득 해야합니다. AWS 자격증AWS에서는 이러한 자격증이 있다고 하니 관심 있는 분들은 도전해봐도 좋을 듯 합니다. 저도 기회가 되면 Solution Architect Professional, Security Speciality에 도전해 보고 싶습니다. 시험 형식 문제: 65문제 시간: 130분(한국어로 응시하면 30분 연장 가능) 비용: $150 합격: 720/1000 시험은 문제은행 식으로 대부분이 4개의 선택지 중 1개를 고르는 문제이고 5개의 선택지 중 2개를 고르는 문제도 간혹 출제됩니다. 사실 가장 어려운건 비용이 아닐까요? 결과결과는 시험을 본 뒤 바로 출력됩니다. 합격 확인은 하루 정도면 메일로 보내주며 자격증도 5일 이내로 메일로 전송되었습니다. 공부 방법전 약 2주정도 공부했습니다. 이미 AWS 서비스에 대해 사전지식도 있었기 때문에 덤프 위주로 공부했습니다. 정리도현 님의 깃헙을 참고해서 따로 개념정리 노트를 만들어두었습니다. 시험 전반적인 설명도 잘 되어있어 많은 도움이 되었습니다. 덤프AWS SAA-C02 샘플 문제는 10문제 밖에 안되지만 문제가 이런식으로 나온다 정도로 확인하시면 됩니다. 가장 많은 도움이 되었던 것은 exam topic이였습니다. 사이트의 답안이 틀릴 수 있어 문제를 풀고 Discussion을 꼭 확인하셔야 합니다. end다시 한번 강조하지만 이 시험의 가장 큰 난이도는 비용이라고 생각합니다. 여러분들도 꼭 한번에 합격하길 기원합니다.","link":"/2022/02/04/AWS-Solutions-Architect-Associate-%ED%95%A9%EA%B2%A9-%ED%9B%84%EA%B8%B0/"},{"title":"Google 개발자 계정을 만들어보자","text":"prologue안드로이드 개발자라면 만들어야 할 수 밖에 없는 그 계정 Google 개발자 계정입니다. 물론 전부는 아니겠지만 대부분의 경우엔 구글 플레이스토어에 앱을 출시합니다. 저도 안드로이드를 공부하는 입장으로서 만들어 보았습니다. 준비물Google 개발자 계정을 만들기 위해선 다음의 준비물이 필요합니다. 계정 등록비: 25$ 개발자 계정으로 만들 Google 계정 일반 구글 계정을 구글 콘솔에서 등록 수수료 25$를 결제하면 개발자 계정으로 Teir up 하는 구조 같습니다.(이래서 플랫폼 사업이 돈이 되나 봅니다. 등록만 하는데 피같은 3만원을 가져가고, 수익이 나면 그것도 떼가고) 계정 만들기기존 계정을 사용하기엔 무리가 있으니 만드는거 새로운 계정으로 만들었습니다. 구글 계정을 만드는 방법은 어렵지 않으니 생략했습니다. 개발자 계정으로 Tier Up롤 승급하고싶다. 새 개발자 계정 만들기구글 플레이 개발자 콘솔은 이곳에서 이름 정하는건 변수던 함수던 사용자명이던 가장 고민되는 부분입니다 등록비 결제과연 출시한 앱으로 3만원을 벌 수 있을까요 완성-30,000 KRW Console 창 확인구글 플레이스토어에 앱을 출시할 수 있는 자격을 샀습니다(현질?). 정책을 위반한다면 개발자 개정이 정지를 당하니 주의하도록 합시다.","link":"/2021/06/12/Google-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EA%B3%84%EC%A0%95%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90/"},{"title":"Hexo 블로그에 Google Analytics를 적용해 보자","text":"다른 사람은 모르겠지만 저는 예전부터 궁금했습니다. SNS에 사진이나 글을 올렸을 때 도대체 누가 볼까, 몇명이나 읽을까라고 말이죠. 저는 지금도 궁급합니다. 도대체 누가 이런 글을 읽으러 오는 것일까 하고 말이죠. 그래서 Google Analytics를 준비했습니다. 이걸 블로그에 도입하면 누가 얼마나 이 블로그에 오는 것인지, 어떤 포스트에 가장 많은 관심을 갖는지 알 수 있겠죠. Prologue일단 블로그에 매달아 놓으려면 이게 무엇에 쓰는 것인지는 알아야 매달지 말지를 결정할 수 있습니다. 쓸모없는거 매달아놓고 나중에 치우것은 정말 귀찮습니다. 그런고로 잘 알아보고 적절한 것을 갔다 쓰면 훗날 있을 귀찮음을 하나 줄일 수 있습니다. 그래서 Google Analytics(이하 GA)가 무엇인가? 하면 사용자들의 나이, 성별, 페이지에 머물던 시간, 행동 패턴들을 이용하고 조합해 유의미한 통계들을 출력해주는 서비스입니다. 신규 방문의 비율이 많은지, 재방문이 많은지, 접속자는 모바일이 많은지, 데스크탑이 많은지 등등 꽤 유의미한 정보를 얻을 수 있습니다.(과연 그 정보가 블로그를 하는데 꼭 필요한가? 기술블로그라 잘 안볼텐데?) 사실 작은 기술 블로그를 운영하는 저는 그다지 필요 없는 서비스입니다. 어차피 검색해서 들어올 사람들은 한정적이고 요즘 사람들은 긴 글을 잘 읽지 않기 때문입니다. 그렇지만 사용하려는 이유는 안해보는 것 보단 낫기 때문입니다. GA는 웹 뿐만 아니라 모바일 앱에도 적용을 할 수 있습니다. 모바일 앱이나 다른 애플리케이션에 적용하기 전에 한번 사용해본다는 생각으로 작업했습니다. Google Analytics Setting가입서론이 길었으니 바로 시작하겠습니다. 가입은 이곳(Google Analytics)에서 진행합니다. 새로운 계정을 만드는 것은 언제나 설레는 일입니다. 특히 게임 계정을 만들땐 특히나 더욱 설레곤 합니다. 계정 설정게임으로 치면 닉네임에 해당하는 부분입니다. 닉네임을 잘 정해두면 두고두고 이름으로 고민하지 안하도 됩니다. 여러분들도 이름짓기가 얼마나 힘든 일인지 알고 있습니다 변수명, 함수명 짓기가 얼마나 힘든지. 속성 설정어디에 사용할 지 라벨을 붙이는 과정입니다. 여기서도 이름을 붙어야 합니다. 꼭 필요한 과정이긴 하지만 도대체 이름을 얼마나 붙여야 하는지… 이름은 기술 블로그에 적용하기 위해 만들었으니 Blog라는 이름을 사용했습니다. 통화는 $가 멋저 보여서 변경하지 않았습니다. 비즈니스 정보비즈니스를 하진 않지만 항목은 성실하게 작성했습니다. 비즈니스를 하지 않아도 수익은 얻고싶은 그런 마음 약관약관은 매우 중요하니 꼭 읽어보라는 말을 듣곤합니다. 하지만 이걸 다 읽는 사람이 과연 몇이나 될까? 라는 의문을 줄곧 가지고 있습니다. 용어 정리와 사용료, 서비스, 계정 보안, 라이선스 등에 대한 정보를 가지고 있다. 그리고 가장 중요한 면책과 배상에 대한항목이 있습니다. 면책과 배상은 약관에 빠질 수 없는 감초 같은 것이라고 들었습니다. 데이터 스트림 설정데이터 스트림 설정은 ①설정 &gt; ②데이터 스트림 &gt; ③웹 을 선택합니다. 블로그(웹)에 연동할 것이니 웹을 선택합니다. 스트림 설정측정 ID 값은 블로그 설정파일(_config.yml)에 등록해야합니다. 그러니 복사해 둡시다. 중요한 정보는 너굴맨이 처리했으니 안심하라구! 블로그에 적용하기설정파일 변경./themes/aria/_config.yml12# Google Analytics Tracking IDgoogle_analytics: [Tracking ID] 해당 부분에 측정 ID를 붙여넣습니다. 배포하기1# hexo g -d 확인GA의 연동은 약 24시간 정도 걸린다고 합니다.연동이 잘 되었습니다. 역시나 저 말고는 아무도 찾아오지 않습니다.","link":"/2020/12/31/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-Google-Analytics%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%B4-%EB%B3%B4%EC%9E%90/"},{"title":"내가 보려고 만든 Markdown 사용법","text":"Headers문서 제목(Title)12이것은 문서 제목입니다 h1 태그와 동일합니다===================== 이것은 문서 제목입니다 h1 태그와 동일합니다 문서 부제목(Sub title)12이것은 문서 부제목입니다 h2 태그와 동일합니다---------------------- 이것은 문서 부제목입니다 h2 태그와 동일합니다 글머리(h1 ~ 6))123456# 이것은 h1 입니다## 이것은 h2 입니다### 이것은 h3 입니다#### 이것은 h4 입니다##### 이것은 h5 입니다###### 이것은 h6 입니다 이것은 h1 입니다이것은 h2 입니다이것은 h3 입니다이것은 h4 입니다이것은 h5 입니다이것은 h6 입니다 Block Quote블록 인용 문자 &gt; 를 사용한다1&gt; 이것은 블록인용 문자 입니다 이것은 블록인용 문자 입니다 중첩해서 사용이 가능하다123&gt; 이것은 첫 번째 블록인용 문자 입니다&gt;&gt; 이것은 두 번째 블록인용 문자 입니다&gt;&gt;&gt; 이것은 세 번째 블록인용 문자 입니다 이것은 첫 번째 블록인용 문자 입니다 이것은 두 번째 블록인용 문자 입니다 이것은 세 번째 블록인용 문자 입니다 인용문 안에 다른 Markdown 요소를 넣을 수 있다12&gt; ##### 이것은 인용문 안의 h5 태그 입니다&gt;&gt; ~~~이것은 인용문 안의 코드블록 입니다~~~ 이것은 인용문 안의 h5 태그 입니다 this is code block 목록순서 있는 목록(번호)1231. first2. second3. third first second third 어떤 번호를 입력해도 내림차순으로 정렬된다 1231. first3. third2. second first third second 순서 없는 목록(글머리 기호)1234567891011- first - second - third+ first + second + third* first * second * third first second third first second third first second third 깊이를 조절하기 위해 tap을 사용한다 혼합해서 사용하는 것도 가능하다 1231. first 2. second 3. third first second third CodeCode Blocks코드 첫줄과 마지막 줄에 ``` 혹은 ~~~을 붙여 사용한다 test.py12345``` 이것은 코드 코드블럭 입니다``` 123이것은코드 코드블럭입니다 array.map1array.map(callback[, thisArg]) 언어 자동 식별 기능을 통해 코드 하이라이팅이 가능하다 12345```python import osprint(os.path)``` 123import osprint(os.path) Inline code block1`인라인 코드 블록` 인라인 코드 블록 강조 Emphasis기울여 쓰기(italic)12*기울여 쓰고싶은 것*_기울여 쓰고 싶은 것_ 기울여 쓰고싶은 것기울여 쓰고 싶은 것 굵게 쓰기(bold)12**굵게 쓰고 싶은 것**__굵게 쓰고 싶은 것__ 굵게 쓰고 싶은 것굵게 쓰고 싶은 것 취소선1~~취소선 입니다~~ 취소선 입니다 수평선&lt;hr&gt;123---***___ 윗첨자1이것은 윗첨자&lt;sup&gt;입니다&lt;/sup&gt;. 이것은 윗첨자입니다. 아랫첨자1이것은 아랫첨자&lt;sub&gt;입니다&lt;/sub&gt;. 이것은 아랫첨자입니다. 링크(link)외부 링크(External links)인라인 링크 1[ColorLion](https://ColorLion.github.io) ColorLion참조 링크 12345[ColorLion][1][google][2][1]:https://ColorLion.github.io&quot;ColorLion&quot;[2]:https://google.com &quot;구글&quot; ColorLiongoogle 링크와 아래 참조 부분을 띄워야 한다 URI 링크 12&lt;https://ColorLion.github.io&gt;&lt;example@email.com&gt; https://ColorLion.github.ioexample@email.com 내부 링크(Internal Link)1[내가 보려고 만든 사용법](https://colorlion.github.io/2019/10/21/Markdown-%EC%82%AC%EC%9A%A9%EB%B2%95/) 내가 보려고 만든 사용법 뭐 원하는 그림은 아니지만 어떻게든 됐다 테이블(Table)테이블 생성1234Header1 | Header2--------|--------Content1 | Content2Content3 | Content4 Header1 Header2 Content1 Content2 Content3 Content4 테이블 정렬123Header1 | Header2 | Header3:------- | :-------: | -------: Left | center | right Header1 Header2 Header3 Left center right 이미지인라인 이미지1![이미지 텍스트](/img/Markdown-사용법/cap.png) 링크 이미지1![이미지 텍스트](https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png) 기타이스케이프123\\*\\\\\\_ *\\__","link":"/2019/10/21/Markdown-%EC%82%AC%EC%9A%A9%EB%B2%95/"},{"title":"hexo icarus 테마로 변경하기","text":"한동안 바쁘다는 핑계로 블로그에 포스팅을 하지 않던 사람이 왠일로 블로그를 다시 잡게 되었다. 스승님 같은 분께서 블로그는 해두면 그것이 자산이 된다고 했으니 조금이라도 해보는 것이 낫지 않나 해서 다시 시작해본다. 새로 시작하는 마음으로 테마를 바꿔보도록 하자. 들어가기 전에icarus 테마 다운로드 cmd1npm install -S hexo-theme-icarus 테마 적용 _config.yml123...theme: icarus... 변경 확인 cmd1hexo server icarus 설정가독성과 다크모드 적용을 위해 변경, 적용 방법은 링크에서 파일을 다운받고 theme/icarus에 붙여넣기로 적용 끝 한글 폰트 설정나눔스퀘어라운드, 넥슨메이플스토리체 CDN import themes/icarus/source/css/defualt.styl12@import url('https://cdn.rawgit.com/innks/NanumSquareRound/master/nanumsquareround.css');@import url('https://webfontworld.github.io/NexonMaplestory/NexonMaplestory.css'); 폰트 적용 themes/icarus/include/style/base.styl12// $family-sans-serif ?= Ubuntu, Roboto, 'Open Sans', 'Microsoft YaHei', sans-serif$family-sans-serif ?= 'NexonMaplestory', &quot;nanumsquareround&quot;, sans-serif profile 변경코드 삭제 themes/icarus/layout/widget/profile.jsx123{followLink ? &lt;div class=&quot;level&quot;&gt;&lt;a class=&quot;level-item button is-primary is-rounded&quot; href={followLink} target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;{followTitle}&lt;/a&gt;&lt;/div&gt; : null} prifile 사진 라운드 설정 themes/icarus/layout/widget/profile.jsx123&lt;figure class=&quot;image mx-auto mb-2&quot;&gt; &lt;img style={{'border-radius': '20px'}} class={'avatar' + (avatarRounded ? ' is-rounded' : '')} src={avatar} alt={author} /&gt;&lt;/figure&gt; article 스타일 변경포스트 제목 스타일 변경 themes/icarus/include/style/article.styl12345&amp;.article .title font-size: 2.2em font-weight: 700 letter-spacing: -1.4px; 포스트 내용 스타일 변경 themes/icarus/include/style/article.styl123456.content font-size: $article-font-size font-weight: 350 line-height: 1.9em; letter-spacing: -0.3px; margin-top: 20px; head 1, 2 스타일 변경 themes/icarus/include/style/article.styl123456789h1 font-size: 1.95em font-weight: 600 margin-top: 50px;h2 font-size: 1.5em font-weight: 500 margin-top: 35px; 일단 기본적인 설정은 끝냈고 만약 사용하다가 불편하거나 고쳐야 될 부분은 나중에 고치도록 하자","link":"/2022/01/30/hexo-icarus-%ED%85%8C%EB%A7%88%EB%A1%9C-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/"},{"title":"hexo icarus 테마 node.js (node:8164) Warning","text":"Warning 발생 원인icarus로 테마를 변경하던 도중 발견한 Warning 입니다. 페이지를 부를 때마다 생기는 여러줄의 Warning은 운영자로 하여금 정신을 나가버리게 만드는 요소 중 하나라고 생각합니다. 원인node.js 버전을 16.1.0 버전으로 설치한 것이 원인 이였습니다. 더 정확하게는 node.js의 의존성이 걸린 shell.js의 버전이 0.7.x 이면서 node.js의 버전이 14.x 이상일 때 호환성 문제가 생겨 발생하는 것입니다. 해결해결은 shell.js의 버전을 변경하거나 node.js의 버전을 변경하는 방법입니다. shell.js는 hexo에서 사용하는 것 같으니 nvm을 사용해 node.js의 버전을 변경해 사용하는 환경으로 구축해 보도록 하겠습니다. 개발 환경에 nvm 도입이곳에서 nvm-setup 파일을 받아줍니다. 이후 압축을 풀고 설치합니다. 이미 node.js가 설치 되어있다면 원래 설치된 버전을 nvm이 관리하도록 추가합니다 nvm 사용 명령어nvm 설치 확인 cmd1nvm version 필요한 node.js 버전 설치 cmd1nvm install v.13.5.0 설치된 node.js 버전 확인 cmd1nvm ls 다른 node.js 버전 사용 cmd1nvm use 13.5.0 마치며이로써 원하는 버전의 node.js를 쓸 수 있게 되었습니다. 웹 개발엔 16.1.0 버전을 사용하고 블로그를 작성할 땐 13.5.0 버전을 사용하니 Warning도 뜨지 않으니 속이 후련하군요","link":"/2022/01/31/hexo-icarus-%ED%85%8C%EB%A7%88-node-js-node-8164-Warning/"},{"title":"포스팅을 위한 hexo 사용법","text":"blog를 꾸미기 위해서는 먼저 post를 작성하는 방법을 알아야 합니다. 작성보다 더 중요한 것은 삭제와 변경입니다. 나름 공부를 하고 post를 썼지만 해당 글이 잘못된 정보를 전파하는 똥글이 되버린다면 아 내가 이런 똥글을 썼다고? 인 상황이 발생할 수 있으니까요. PostingWriting1hexo new [layout] &lt;title&gt; post, draft, page를 생성하기 위한 명령어입니다. 저는 post를 쓸 때 한번에 쓰는 법이 없기 때문에 draft로 작성 후 post로 publish합니다. draft에 대한 설명은 아래를 참고해 주세요. Modify the Post12# source/_posts에서 .md파일 변경 후hexo g -d post의 내용을 변경하는 방법은 매우 간단합니다. 기존에 작성한 post파일을 수정하기만 하면 됩니다. 변경 후 다시 랜더링이 필요합니다. Delete12# source/_posts에서 .md파일 삭제 후hexo g -d post를 삭제하는 방법은 변경 방법과 동일합니다. source/_posts 폴더에 삭제하고자 하는 post 파일(.md)을 삭제한 후 deploy 하면 됩니다. layoutHexo에는 Layout이라는 개념이 존재합니다. 각 Layout의 이름과 저장되는 위치는 다음과 같습니다. post(게시글) : source/_posts page(페이지) : source/ draft(초안) : source/_draft 저는 주로 post와 draft를 사용해 글을 작성합니다. page는 제가 post를 만들면서 한번도 사용해 보진 않았습니다. 앞으로도 사용할 일은 없을 것 같습니다. 1default_layout = post # (page/draft) default layout은 post입니다. default layout을 변경하고자 할 땐 _config.yml의 default_layout 수정하면 됩니다. Draft1hexo new draft &lt;title&gt; draft는 post를 작성할 때 임시 저장의 개념으로 사용할 수 있습니다. Draft로 작성 한 파일은 랜더링 되지 않습니다. 제가 블로그에 post를 작성할 때 맨 처음 생성하는 파일입니다. 1hexo g -d --draft draft도 랜더링 하고자 할 땐 랜더링 시 --draft옵션을 추가 해주면 됩니다. 1render_drafts = true _config.yml의 render_drafts 옵션을 true로 설정하면, --draft 옵션 없이 랜더링 해도 draft가 같이 랜더링 됩니다. 1hexo publish post &lt;title&gt; 작성이 완료된 draft를 post로 변경하는 방법입니다. 이 명령어를 칠 때가 가장 뿌듯합니다. 파일명post의 제목과 동일하게 작성됩니다. _config.yml파일의 new_post_name 옵션을 변경 해 기본 파일명을 변경할 수 있습니다. 사용할 수 있는 placeholder는 다음과 같습니다 :title - post 제목(소문자, 공백은 ‘-‘ 하이픈으로 변경) :year - 연도 생성 :month - 월 생성(ex. 04) :i_month - 월 생성(ex. 4) :day - 일 생성(ex. 07) :i_day - 일 생성(ex. 7) Asset Folder전역 Asset 폴더1![](/images/image.jpg) source 폴더에 위치해 있으며 image, CSS, JavaScript가 저장되는 폴더입니다.포스트에서 이미지를 사용하고싶을 땐 /source/image 폴더에 이미지를 넣고 다음과 같이 호출하면 이미지를 사용할 수 있습니다. Post Asset 폴더1post_asset_folder = true post 단위로 멀티미디어 파일을 관리하고자 할 땐 _config.yml 파일의 post_asset_folder를 true로 설정하면 포스트 생성 시 동일한 이름의 폴더가 생성됩니다. 해당 폴더는 각 포스트의 Asset 폴더로 사용됩니다.저는 늘어가는 post와 함께 증식해가는 image의 이름을 구분해 저장하는 것은 매우 귀찮을 것 같아 Post Asset 폴더를 사용했습니다. 참조 Hexo Documentation","link":"/2019/11/23/starting-blog2/"},{"title":"Blog를 시작한 계기와 플랫폼 선택 및 구축","text":"예전부터 카카오 기술 블로그나 네이버 D2 기술 블로그의 글들을 보면서 블로그를 시작해 보고싶었습니다. 처음부터 멋진 글을 쓰는 것은 불가능하다는 것을 잘 알기에 포스트를 하나하나 늘려가는 것 부터 시작하는 것을 목표로 삼고 시작하고자 합니다. 설치 전에블로그를 시작할 때 고려한 것들블로그를 시작하면서 Jekyll, Octopress 같은 정적 사이트 생성기(Static Site Generator)를 사용할지, 네이버 블로그, Tistory같은 블로그 플랫폼을 사용해야 하는가에 대한 고민을 했습니다. 이런 고민을 하다 보니 어떤 것을 사용해야 할지 감이 잡히지 않아 블로그를 만들 때 생각해 봐야 할 것들을 목록화 했습니다. 마크다운(Markdown) 언어를 사용할 수 있는가? 포스트 생성 및 관리가 간편한가? 호스팅 비용은 무료거나 저렴한 편인가? 내 기준으로 설치와 커스터마이징이 간편한가? 위의 기준을 가지고 후보군을 찾았고 이들 중에서 제 기준에 가장 적합한 것을 사용하는 것으로 사용하자고 했고. 결론부터 말하면 Github + Hexo로 블로그 구축을 결정했습니다. Github + (jekyll or Hexo) Wordpress Tistory 왜 Hexo를 사용했나?제 기준에 있어서 설치와 커스터마이징이 쉽다는 것이 크게 작용했습니다. jekyll은 ruby on rails를 기반으로 하기에 커스터마이징과 코드를 수정하기 위해서 따로 공부를 해야 하지만 Hexo는 node.js를 사용하기 때문에 추가적인 공부가 필요 없었기 때문입니다. 그와 더불어 Hexo 공식문서가 한글로 번역되어 있다는 점, 플러그인 적용이 쉽다는 것도 선택의 이유가 되었습니다. Install설치 환경은 다음과 같습니다 windows10 버전 1903 git version 2.22.0.windows.1 node.js v10.16.3 Hexo 설치는 Git과 node.js가 설치되어 있었기에 npm을 사용해 설치했습니다. 1C:\\Users\\ColorLion&gt; npm install -g hexo-cli Init블로그를 저장할 폴더와 블로그의 기본 구조를 만들었습니다. 123C:\\Users\\ColorLion&gt; hexo init BlogC:\\Users\\ColorLion&gt; cd BlogC:\\Users\\ColorLion&gt; npm install 생성된 구조는 다음과 같습니다. 12345678. # 프로젝트 루트 폴더(./Blog)├── _config.yml # 설정 파일├── package.json ├── scaffolds # 스캐폴드(양식)├── source # 소스 폴더| ├── _drafts # 초안| └── _posts # 포스트└── themes # 테마 폴더 Local Server로 확인123c:\\Work\\Blog&gt; hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. localhost:4000으로 접속하면 블로그가 만들어진 것을 확인할 수 있습니다. Deploy배포는 github의 pages기능을 사용했습니다. 블로그 배포용 github repo 만들기 주의사항 repo의 이름은 [username].github.io로 만들어야 합니다. Deploy Setting빌드된 결과물을 deploy하기 위해 hexo-deployer-git 플러그인을 설치하고 repo를 설정했습니다. hexo-deployer-git 플러그인 설치 1C:\\Work\\Blog&gt; npm install hexo-deployer-git --save 블로그 설정파일(_config.yml) 설정 1234567891011121314# Sitetitle: ColorLion's IT Blogsubtitle: Sec &amp; ML &amp; Devdescription:keywords: Security, Machine Learning, Programmingauthor: ColorLionlanguage: entimezone: Asia/Seoul# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/ColorLion/ColorLion.github.io.git 배포12C:\\Work\\Blog&gt; hexo generateC:\\Work\\Blog&gt; hexo deploy 배포 확인 참조 Hexo Documentation 워드프레스보다 쉬운 Hexo 블로그 시작하기","link":"/2019/10/27/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-1/"},{"title":"hexo blog 테마 변경하기 2","text":"마누라와 자식만 빼고 다 바꿔라 삼성전자 회장 - 이건희 &amp;nbsp;저는 마누라는 커녕 여자친구도 없으니 전부 바꿔보도록 하겠습니다. PrologueAria Blog Sample&amp;nbsp;sample은 aria theme을 만든 Alynx Zhou의 blog입니다. 취향은 존중해야 하니 변경할 부분들만 다시 확인하도록 하겠습니다. 변경할 부분 Header 설정(blog 이름, Aria 로고 지우기) 메뉴바 설정 사이드바 설정 Footer 설정(copy right 변경, github Pages 링크 변경) Fonts, Code Highlighting Change Configuration fileHeader SettingBlog name&amp;nbsp;일단 블로그의 이름을 먼저 바꿔줘야 합니다. 기껏 만들어놓고 대문에 남의 이름 써있으면 기분이 묘해집니다. 해당 설정은 hexo의 _config.yml파일을 수정합니다. ./blog_root/_config.yml12345678# Sitetitle: ColorLion's IT Blogsubtitle: EZ blogingdescription:keywords: ColorLionauthor: ColorLionlanguage: entimezone: Asia/Seoul 바꾸는 김에 timezone, language 등을 변경했습니다. 나머지는 적어둘만한 것이 생각나지 않아 생략했습니다. Logo&amp;nbsp;aria theme을 사용하긴 하지만 로고는 사용하기 애매한 부분이 있어 없애버렸습니다. 로고는 ./blog_root/theme/aria/_config.yml의 logo 부분을 주석 처리 해주는 것으로 없앨 수 있습니다. ./blog_root/theme/aria/_config.yml1#logo: images/logo.png 블로그의 header가 깔끔해졌습니다. Menu bar Setting&amp;nbsp;메뉴 부분에서는 home, archives, tags, categories 이 4가지만 사용할 것입니다. _config.yml12345678910111213141516menu:- name: home link: / icon: &lt;i class=&quot;fas fa-home&quot;&gt;&lt;/i&gt;- name: archives link: archives/ icon: &lt;i class=&quot;fas fa-archive&quot;&gt;&lt;/i&gt;- name: categories link: categories/ icon: &lt;i class=&quot;fas fa-th-list&quot;&gt;&lt;/i&gt;- name: tags link: tags/ icon: &lt;i class=&quot;fas fa-tags&quot;&gt;&lt;/i&gt;# - name: about# link: about/# icon: &lt;i class=&quot;fas fa-user-edit&quot;&gt;&lt;/i&gt; 설정을 변경한 menu입니다. 4가지 항목을 사용했고, about 부분은 나중에 유명해 진다면 사용하는 걸로 합니다.쓰지 않겠다는 말입니다. Create Tags page&amp;nbsp;home과 archives는 블로그 theme 적용 시점부터 바로 사용할 수 있지만 categories와 tags는 따로 만들어 줘야 합니다. 먼저 tags 페이지를 만들어 봅시다. 1$ hexo new page &quot;tags&quot; 생성된 tags 페이지의 index.md파일을 다음과 같이 변경합니다. ./blog_root/source/tags/index.md12345---title: All tagstype: &quot;tags&quot;#date: 2020-03-17 00:00:54--- tag페이지가 정상적으로 동작하는 것을 확인할 수 있습니다. Create Categories pagecategories 페이지도 만들어 봅시다. 1$ hexo new page &quot;categories&quot; 생성된 categories 페이지의 index.md파일을 다음과 같이 변경합니다. ./blog_root/source/categories/index.md12345---title: Categoriestype: &quot;categories&quot;#date: 2020-03-17 00:10:41--- categories 페이지 역시 잘 동작하는군요 만약 제대로 동작하지 않는다면 위의 _config.yml의 설정중 link 부분을 확인해보시길 바랍니다. 해당 경로는 /blog_root/themes/aria/가 아닌 /blog_root/source/ 에 존재하는 디렉토리로 지정됩니다. Sidebar Setting&amp;nbsp;Sidebar는 없애기로 결정했습니다. 올려둘만한 프로필 사진도 없고, 링크를 걸어둘만한 사이트도 없기 때문입니다. ./blog_root/theme/aria/_config.yml12# `left`, `right`, `false`sidebar: false 초라하게 있는 것 보단 없는게 더 깔끔해 보입니다. 미니멀리즘이 이런건가?라고 생각해보는 시간이었습니다. Footer SettingFooter Information&amp;nbsp;github 페이지 링크를 변경하는 작업입니다. ./blog_root/theme/aria/_config.yml12# Custom info in footer.custom_info: github&lt;i class=&quot;fab fa-github-alt&quot;&gt;&lt;/i&gt;&lt;a href=&quot;https://github.com/ColorLion&quot; target=&quot;_blank&quot;&gt;GitHub Pages&lt;/a&gt; 완성입니다. Fonts/Code Highlighting SettingChange Fonts&amp;nbsp;기본 font를 사용한다면 영어는 적용되지만 한글이 적용이 안되기 때문에 변경해주도록 하겠습니다. ./blog_root/theme/aria/_config.yml12345678910111213# Select all your webfont in a CDN like Google Fonts, and then copy `href` property in the `&lt;link&gt;` tag, like `link: //fonts.googleapis.com/css?family=Lato|Roboto+Condensed|Skranji|Ubuntu|Ubuntu+Mono`.# Then set different fonts to different parts here.custom_font: enable: true link: - //cdn.jsdelivr.net/gh/moonspam/NanumSquare@1.0/nanumsquare.css - //cdn.rawgit.com/innks/NanumSquareRound/master/nanumsquareround.css - //cdn.jsdelivr.net/gh/joungkyun/font-d2coding/d2coding.css all: 'NanumSquare' title: 'NanumSquare' subtitle: 'NanumSquare' main: 'NanumSquareRound' code: 'D2Coding' 개인적으로 naver의 폰트를 정말 좋아합니다. 가독성도 좋고 둥글 둥글 하니 귀엽기도 한 것같고 그렇습니다. Change Code Highlighting&amp;nbsp;저는 code highlignting은 무조건 atom-one-dark theme을 사용합니다. vscode도 그렇고 theme를 변경할 수 있다면 대부분 atom-one-dark를 사용합니다. ./blog_root/theme/aria/_config.yml12# Available: atom-one-dark | atom-one-light | solarized-dark | solarized-lighthighlight: atom-one-dark aria theme을 사용하게 된 가장 큰 이유중 하나가 atom-one-dark를 사용할 수 있고, 가장 잘 어울렸기 때문입니다.","link":"/2020/04/07/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-4/"},{"title":"포스팅을 위한 hexo 사용법","text":"blog를 꾸미기 위해서는 먼저 post를 작성하는 방법을 알아야 합니다. 작성보다 더 중요한 것은 삭제와 변경입니다. 나름 공부를 하고 post를 썼지만 해당 글이 잘못된 정보를 전파하는 똥글이 되버린다면 아 내가 이런 똥글을 썼다고? 인 상황이 발생할 수 있으니까요. PostingWriting1hexo new [layout] &lt;title&gt; post, draft, page를 생성하기 위한 명령어입니다. 저는 post를 쓸 때 한번에 쓰는 법이 없기 때문에 draft로 작성 후 post로 publish합니다. draft에 대한 설명은 아래를 참고해 주세요. Modify the Post12# source/_posts에서 .md파일 변경 후hexo g -d post의 내용을 변경하는 방법은 매우 간단합니다. 기존에 작성한 post파일을 수정하기만 하면 됩니다. 변경 후 다시 랜더링이 필요합니다. Delete12# source/_posts에서 .md파일 삭제 후hexo g -d post를 삭제하는 방법은 변경 방법과 동일합니다. source/_posts 폴더에 삭제하고자 하는 post 파일(.md)을 삭제한 후 deploy 하면 됩니다. layoutoverviewHexo에는 Layout이라는 개념이 존재합니다. 각 Layout의 이름과 저장되는 위치는 다음과 같습니다. post(게시글) : source/_posts page(페이지) : source/ draft(초안) : source/_draft 저는 주로 post와 draft를 사용해 글을 작성합니다. page는 제가 post를 만들면서 한번도 사용해 보진 않았습니다. 앞으로도 사용할 일은 없을 것 같습니다. 1default_layout = post # (page/draft) default layout은 post입니다. default layout을 변경하고자 할 땐 _config.yml의 default_layout 수정하면 됩니다. Draft1hexo new draft &lt;title&gt; draft는 post를 작성할 때 임시 저장의 개념으로 사용할 수 있습니다. Draft로 작성 한 파일은 랜더링 되지 않습니다. 제가 블로그에 post를 작성할 때 맨 처음 생성하는 파일입니다. 1hexo g -d --draft draft도 랜더링 하고자 할 땐 랜더링 시 --draft옵션을 추가 해주면 됩니다. _config.yml1render_drafts = true _config.yml의 render_drafts 옵션을 true로 설정하면, --draft 옵션 없이 랜더링 해도 draft가 같이 랜더링 됩니다. 1hexo publish post &lt;title&gt; 작성이 완료된 draft를 post로 변경하는 방법입니다. 이 명령어를 칠 때가 가장 뿌듯합니다. 파일명post의 제목과 동일하게 작성됩니다. _config.yml파일의 new_post_name 옵션을 변경 해 기본 파일명을 변경할 수 있습니다. 사용할 수 있는 placeholder는 다음과 같습니다 :title - post 제목(소문자, 공백은 ‘-‘ 하이픈으로 변경) :year - 연도 생성 :month - 월 생성(ex. 04) :i_month - 월 생성(ex. 4) :day - 일 생성(ex. 07) :i_day - 일 생성(ex. 7) Asset Folder전역 Asset 폴더1![](/images/image.jpg) source 폴더에 위치해 있으며 image, CSS, JavaScript가 저장되는 폴더입니다.포스트에서 이미지를 사용하고싶을 땐 /source/image 폴더에 이미지를 넣고 다음과 같이 호출하면 이미지를 사용할 수 있습니다. Post Asset 폴더1post_asset_folder = true post 단위로 멀티미디어 파일을 관리하고자 할 땐 _config.yml 파일의 post_asset_folder를 true로 설정하면 포스트 생성 시 동일한 이름의 폴더가 생성됩니다. 해당 폴더는 각 포스트의 Asset 폴더로 사용됩니다.저는 늘어가는 post와 함께 증식해가는 image의 이름을 구분해 저장하는 것은 매우 귀찮을 것 같아 Post Asset 폴더를 사용했습니다. 참조 Hexo Documentation","link":"/2019/11/23/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-2/"},{"title":"hexo blog 테마 변경하기 1","text":"튜닝의 끝은 순정이다 튜닝의 튜닝을 거듭한 사람 - 순정파(곽철용) 라는 말이 있습니다. 이 말은 튜닝을 해봐야 순정의 좋은점을 알게 된다는 의미가 아닐까라는 생각이 들어 블로그의 테마를 변경해봤습니다. 이번 post에서는 테마를 바꾸면서 하게된 여러가지 삽질에 대해 적어보도록 하겠습니다. Prologue어떤 Theme을 적용해야 할까기존 테마&amp;nbsp;이전 post를 보고 오셨다면 hexo의 default theme가 어떻게 생겼는지 어느정도 확인하셨을겁니다. 깔끔하니 좋은 듯 하지만 썩 마음에 들진 않으니 바꿔보도록 하겠습니다. 테마를 고르는 기준&amp;nbsp;무언가를 바꾸기 위해서는 기존의 것과 다른 차별점이 있어야 합니다. 기껏 좋아보여서 바꿨는데 이전 것과 똑같으면 뭐하러 움직였나 하면서 괜히 기분만 나쁘기 때문입니다. theme 선택 시 중요하게 했던 것은 크게 3가지 입니다. 디자인이 너무 과하지 않을 것 영어 문서가 있을 것 필요한 기능(댓글, google analytics, code block의 highlighting 지원 등) 다음과 같은 기준으로 hexo themes에서 후보군을 정했습니다. Aria Alpha Dust Archer &amp;nbsp;결론부터 말하자면 Aria로 변경했습니다. 영어를 지원하고 가장 무난했으며 무엇보다 code block의 디자인이 정말 마음에 들었습니다. 솔직히 code block의 디자인만 보고 결정했습니다. &amp;nbsp;Alpha Dust는 특유의 중2병스러운 감성과 깔끔함이 마음에 들었지만 blog에 적용했을 때 code block high lighting이 정상 동작하지 않는 치명적인 단점이 있었습니다. 또한 최근 업데이트도 없는 것으로 보아 포기하게 되었습니다. &amp;nbsp;Archer는 code block과 Theme 자체는 깔끔했으나 제가 원하는 깔끔함이 아니였습니다. 본인 옷을 이렇게 신경 썼으면 알바하러 나가면서 츄리닝을 입고 나가진 않았을 것입니다. Change Theme&amp;nbsp;본격적으로 theme를 변경해 보도록 하겠습니다. 과정은 간단하며, theme에 필요한 패키지 설치, blog의 _conifg.yml 변경 순으로 진행됩니다. Install Packages필수1$ npm install --save hexo-renderer-njucks hexo-renderer-stylus &amp;nbsp;JavaScript template인 nunjucks와 CSS pre-processor인 stylus를 설치하는 명령어 입니다. Aria는 해당 두 패키지를 사용해 랜더링 되기 때문에 필수적으로 설치해야 합니다. 선택1$ npm install --save hexo-generator-search hexo-generator-feed &amp;nbsp;해당 패키지들은 블로그 내에서 검색과 RSS feed를 만들어주는 패키지입니다. 저는 굳이 필요 없다고 생각했기 때문에 설치하지 않았습니다. Install Themes1$ git clone https://github.com/AlynxZhou/hexo-theme-aria themes/aria &amp;nbsp;자신이 설정한 blog root에서 theme를 다운받습니다. 특이사항은 없습니다. 사실 post의 길이를 위해서 상당히 많은 헛소리를 했습니다. Modify Configurationblog’s _config.yml./_config.yml12345678910111213# theme changetheme: aria# languagelanguage: en# highlighting settinghighlight: enable: true hljs: true line_number: true auto_detect: true tab_replace: &amp;nbsp;theme를 변경하면서 기본적인 설정도 변경했습니다. 언어는 설정하지 않으면 default language인 중국어로 표시될 것이고, highlighting 설정을 하지않으면 이 theme을 쓰는 이유가 없어지게 되니 설정하도록 합시다. 그 밖에 다른 설정을 변경하시는 분들은 hexo documenation을 참조하시기 바랍니다. create aria’s _config.yml1$ cp ./theme/aria/_config.yml.example ./theme/aria/_config.yml &amp;nbsp;aria의 configuration file을 만들어 줍니다. aria의 설정을 변경하고자 할 때 사용하는 파일입니다. 참조 Hexo Documentation Alpha Dust Demo Page Aria Demo Page","link":"/2020/03/18/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-3/"},{"title":"hexo blog 테마 변경하기 3","text":"&amp;nbsp;모니터를 샀을 때 가장 신경쓰이는 것은 불량화소 입니다. 불량화소가 10개가 넘어가면 아 불량품 받았네 하고 별 생각 없이 교환을 받거나 반품 받겠지만 불량화소가 1개, 2개 있다면 정말 난감해집니다. 괜히 신경쓰이고 그렇다고 이거 하나 때문에 바꿔야되나 싶고 내 뽑기운이 이정도 밖에 안되는건가? 하며 자괴감 들고 괴롭기도 합니다. 하지만 블로그는 다릅니다. 마음에 안드는 게 있다면 바꿀 수 있기 때문입니다. 이번 포스트에서는 불량화소 같은 것들을 바꿔보도록 하겠습니다. Prologue뭐가 그렇게 마음에 들지 않는걸까 ???: 언니 저 맘에 안들죠?!!!: 눈을 왜 그렇게 떠? 튜닝을 할꺼면 어중간하게 해서는 안됩니다. 마음에 들 때 까지 해야 꽤 오랜시간 신경 안쓰고 사용할 수 있기 때문입니다. 조금 쓰다가 이거 맘에 안든다고 바꿔버리고, 저거 맘에 안든다고 바꿔버리면 정작 본 작업에 집중 할 수 없게 되니까요. 이번에 바꿀 것들은 다음과 같습니다. Archive, Catetories, Tags 페이지의 문구 줄간격 Scroll 두께 aria theme의 구조&amp;nbsp;분해는 조립의 역순이라는 말의 뜻은 분해를 해봐야 다시 조립을 할 수 있다는 의미입니다. 그렇다고 하나하나 코드를 들여다 보기엔 시간도 별로 없고 귀찮기도 하고 그래서 간단하게 훑고 지나가겠습니다. structure12345678910. # ./theme/aria/├── languages # blog 언어 파일├── layout # Nunjucks 파일├── scripts # tag에 사용할 정규 표현식 js 파일├── source # blog 디자인의 대부분을 담당하는 폴더| ├── css # css 파일| └── fonts # font 파일| └── images # logo, background, avatar 이미지파일| └── js # javascript 파일├── some files .njk 파일도 있으면서 css파일도 있고, scripts 폴더도 있으면서 js 폴더도 있는 신기한 구조지만 뭐 어쩌겠습니까. 제가 만든것이 아니기 때문에 이것만으로도 감지덕지 하면서 고쳐 써야죠. &amp;nbsp;손댄 부분은 languages, layout, ./source/css이 세가지 부분 입니다. 간단한 부분부터 시작하겠으나 이번 경우엔 특히나 삽질을 많이 했던 부분입니다. 했던 삽질을 같이 첨부하고 싶지만 포스트가 너무 길어질것 같으니 다음 포스트로 작성하겠습니다. ChangeArchive, Categories, Tags 문구 변경Whats the matter?저는 깔끔한게 좋으니 치워버리겠습니다. modify./themes/aria/languages/en.yml1234567891011121314postcount: none: '' #You have no post, write now! one: '' #You have %d post, keep on! more: '' #You have %d posts!tagcount: none: '' #You have no tag, create now！ one: '' #You have %d tag, keep on! more: '' #You have %d tags!categorycount: none: '' #You have no category, create now! one: '' #You have %d category, keep on! more: '' #You have %d categories! 좋습니다. 하지만 아직도 지워야 할 것들이 있습니다. 지워보도록 합시다. ./themes/aria/layout/archive.njk12345678910111213&lt;div id=&quot;archive&quot; class=&quot;archive page&quot;&gt; &lt;!--&lt;h1 class=&quot;page-title&quot;&gt;{{ __(&quot;archive&quot;) }}&lt;/h1&gt; &lt;h2 class=&quot;page-counter&quot;&gt; {% if site.posts.length &gt; 1 %} {{ _p(&quot;postcount.more&quot;, site.posts.length) }} {% elif site.posts.length === 1 %} {{ _p(&quot;postcount.one&quot;, site.posts.length) }} {% else %} {{ __(&quot;postcount.none&quot;) }} {% endif %} &lt;/h2&gt; --&gt; (...skip...)&lt;/div&gt; ./themes/aria/layout/categories.njk123&lt;header class=&quot;post-header&quot;&gt; &lt;!--&lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;{{ __(page.title) }&lt;/h1&gt;--&gt;&lt;/header&gt; ./themes/aria/layout/tags.njk123&lt;header class=&quot;post-header&quot;&gt; &lt;!-- &lt;h1 class=&quot;post-title&quot; itemprop=&quot;name headline&quot;&gt;{{ __(page.title) }}&lt;/h1&gt; --&gt;&lt;/header&gt; &amp;nbsp;총 3개의 파일을 변경했습니다. 사실 njk파일들을 변경한다면 en.yml 파일은 변경하지 않아도 되긴 하지만 njk파일이 en.yml을 읽은 뒤 페이지를 렌더링 하기 때문에 혹시나 몰라서 변경해 두었습니다.깔끔하니 보기 좋습니다. 파일 여러개를 수정해서 복잡한 것 같지만 주석 처리만 했기 때문에 어렵지 않습니다. 줄간격Whats the matter?&amp;nbsp;원래가 중국어 폰트를 사용하는 블로그라 그런지 줄간격이 좁았습니다. 특히 이 문제는 plan text와 inline block을 같이 사용할 때 발생하는 문제점이였습니다. 그리고 조절하는 김에 h1~h5 와 p, li tag의 간격도 조절했습니다.바지 지퍼 올리다가 찝힌 기분입니다. modify&amp;nbsp;아프니 바로 바꿔보도록 하겠습니다. ./themes/aria/source/scc/post.styl1234567891011121314151617181920212223.post-main { h1{ line-height:1em; margin-block-start: 1.5em; margin-block-end: 0.2em; } h2{ line-height:1em; margin-block-start: 0.6em; margin-block-end: 0.5em; } h3{ line-height:1em; margin-block-start: 0.6em; margin-block-end: 0.2em; } p{ line-height:1.5em; margin-block-start: 0.3em; margin-block-end: 0.7em; } (...skip...)} post.styl는 .post-main부분에 각 태그의 스타일을 추가해주면 됩니다. ./themes/aria/source/scc/index.styl1234li{ margin-block-start: 0.2em; margin-block-end: 0.2em;} index.styl는 다른 tag와 겹치지 않는 선에서 마음에 드는 부분에 추가하면 됩니다. Scroll 두께 조절Whats the matter?&amp;nbsp; 기존 스크롤은 상당히 얇아서 마우스로 클릭하기가 힘들었습니다. 그래서 늘렸습니다. modify./themes/aria/source/scc/index.styl1234::-webkit-scrollbar { width: 0.8em; height: 0.4em;} 해당 부분의 widht의 값을 조정하는 것으로 scroll bar의 두께를 조절할 수 있습니다. 마지막으로 code block까지 변경했으나 포스트의 길이 관계 상 다음 포스트로 작성하겠습니다.","link":"/2020/04/19/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-5/"},{"title":"aria 테마 code block 변경하기","text":"**라이벌(Rival)**은 동등 혹은 그 이상의 실력은 가진 경쟁자를 의미한다 적수라고도 한다. 위키백과 &amp;nbsp;라이벌이라는 존재는 존재 자체만으로 동기부여가 됩니다. 이번 포스트에서는 블로그를 시작하면서 생긴 라이벌 code block을 다뤄보도록 하겠습니다. PrologueCode BlockBefore Patch&amp;nbsp;aria 테마를 설치하고 처음 code block을 보고 이야 이거 물건이다라는 생각이 들었습니다. 뭐랄까 감성을 자극했다고 해야되나요? 쨌든 잘 다듬어서 써야겠다 라고 생각했습니다. 하지만 포스트 몇개를 올리게 되고, 블로그의 세팅을 변경하다보니 깨닫게 된 사실이 있었습니다.초기 code block은 왼쪽 상단의 복사 버튼, 동작은 하지 않지만 우측 상단의 최소화, 최대화, 닫기 버튼이 있고, 작업 표시줄 부분엔 code라는 문자열이 고정되어 있습니다. Another dead pixel&amp;nbsp;그렇다면 무엇이 문제일까요. 눈치가 빠르신 분이라면 아시겠지만 code block의 제목 부분이 code로 고정되어있습니다. 한가지 더 문제점이 있는데 이는 Mark Down 파일 작성 시 code block에 파일명을 넣어서 작성하는 경우 입니다.오늘 수고해주실 코드블럭입니다. A wasted of TimeFirst step사태 파악&amp;nbsp;변경을 위해선 먼저 저 제목 부분이 어떤 tag를 달고 있는지 확인해야 합니다. chorme 개발자 도구를 활용해 봅시다.확인해 보니 file name 부분은 figcaption tag를 사용하고 있고, title bar 부분은 div.code-titlebar tag를 사용하고 있습니다. modify&amp;nbsp;첫 삽질은 title bar에 code를 지우는 것이였습니다. 먼저 원본 코드를 보도록 하겠습니다. ./themes/aria/layout/_layout.njk12345678910111213141516171819202122232425&lt;script defer type=&quot;text/javascript&quot; src=&quot;{{ url_for(&quot;js/index.js&quot;) }}&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function () { var cb = null; var els = $(&quot;.post figure.highlight&quot;); if (els.length) { // Enabled Hexo highlight line number. $(els).each(function (i, e) { // $(e).before(&quot;&lt;button class=\\&quot;copy button\\&quot;&gt;{{ __(&quot;clipboard.copy&quot;) }}&lt;/button&gt;&quot;); $(e).before([ &quot;&lt;div class=\\&quot;code-titlebar\\&quot;&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-left\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;copy\\&quot; aria-label=\\&quot;{{ __(&quot;clipboard.copy&quot;) }}\\&quot;&gt;&lt;i class=\\&quot;far fa-copy\\&quot;&gt;&lt;/i&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-center\\&quot;&gt;&quot;, &quot;{{ __(&quot;&quot;) }}&quot;, //&quot;{{ __(&quot;code&quot;) }}&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-right\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-minimize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-maximize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-close\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;/div&gt;&quot; ].join(&quot;&quot;)); }); 16번째 줄을 보면 “code”문자열을 지우면 제목 표시줄의 code를 지울 수 있습니다.제목 표시줄이 깔끔해졌습니다.하지만 file name을 사용한다면 디자인이 구려집니다. 그렇다고 제목을 포기할 수는 없습니다. 저는 code block에 제목을 다는 법을 알게 되버렸으니까요. Second step사태파악&amp;nbsp;두번째로 생각한 내용은 제목 표시줄에 표시할 수 없다면 file name css의 디자인을 code block에 맞추는 것이었습니다. 그리고 제목 표시줄 왼쪽에 copy 기능이 file name을 적으면 copy 기능이 제대로 동작하지 않는 버그도 발견했습니다. 아쉽게도 이번 step에서는 해당 버그를 고치진 못했고 버그가 있다는 것만 확인했습니다. modify&amp;nbsp;변경해야될 figcaption tag의 css파일을 찾을 수 없었기에 index.styl 파일에 추가했습니다. ./themes/aria/source/css/index.styl1234567891011figcaption{ color: $color-code-titlebar-font; background: #4f5258; border-radius: $corner-radius; padding: 0.25em; padding-left: 1em; padding-right: 1em; position: relative; display: inline; text-align: center;} file name에 css가 적용되었습니다. &amp;nbsp;한동안 figcaption에 css를 적용해 code block을 사용했습니다. 아무래도 front end 부분은 깊게 다뤄본 적이 없어서 지금 수준으론 문제를 해결할 수 없다고 판단해 공부를 더 했습니다. The end&amp;nbsp;시간이 날때마다 aria의 코드를 보고 나름 구조를 파악하다 보니 DOM의 사용법과 JS의 사용법 등을 실험하다보니 copy버그와 titebar를 수정 할 수 있었습니다. Copy&amp;nbsp;code block에 file name을 사용한다면 copy 기능이 왜 동작하지 않는지 알아야 했습니다. 수정 전의 원본 코드를 확인해보겠습니다. ./themes/aria/layout/_layout.njk123456cb = new ClipboardJS(&quot;button.copy&quot;, { &quot;target&quot;: function (trigger) { // Get target element by DOM API. return trigger.parentNode.parentNode.nextElementSibling.firstChild.firstChild.firstChild.lastChild.firstChild.firstChild; }}); 해당 코드는 _layout.njk 파일의 일부입니다. copy button을 click하면 return에 해당하는 object를 clip board에 copy하는 기능을 가지고 있습니다. 해당 코드가 실행되면 file name이 없는 경우에는 정상적으로 copy하지만 file name이 있는 경우에는 아무런 동작을 하지 않습니다. &amp;nbsp;file name이 있어도 code를 return 할 수 있도록 return 부분을 수정해 보도록 하겠습니다. ./themes/aria/layout/_layout.njk1234567cb = new ClipboardJS(&quot;button.copy&quot;, { &quot;target&quot;: function (trigger) { // Get target element by DOM cd API. return trigger.parentNode.parentNode.nextElementSibling.lastChild.lastChild.lastChild.lastChild; //return trigger.parentNode.parentNode.nextElementSibling.firstChild.firstChild.firstChild.lastChild.firstChild.firstChild; }}); file name을 사용하더라도 code만 clip board에 복사 해 올 수 있습니다. Title bar&amp;nbsp;titlebar를 수정하면서 했던 삽질 중에 가장 기억에 남는 것은 code block의 모든 text를 읽어와서 조건문을 사용해 file name만 추출하는 방법이었습니다. 물론 code block 마다 조건문이 동작했기 때문에 포스팅에 code block이 많거나 code block의 text가 많다면 페이지 로딩 시간이 3~5초 길게는 10초 이상도 걸렸던 적이 있습니다.&amp;nbsp;copy 기능의 버그를 수정하면서 했던 몇가지 실험을 성공해 title bar에도 적용할 수 있었습니다. 아래는 원본 코드의 일부분입니다. ./themes/aria/layout/_layout.njk1234567891011121314151617181920212223$(document).ready(function () { var cb = null; var els = $(&quot;.post figure.highlight&quot;); if (els.length) { // Enabled Hexo highlight line number. $(els).each(function (i, e) { // $(e).before(&quot;&lt;button class=\\&quot;copy button\\&quot;&gt;{{ __(&quot;clipboard.copy&quot;) }}&lt;/button&gt;&quot;); $(e).before([ &quot;&lt;div class=\\&quot;code-titlebar\\&quot;&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-left\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;copy\\&quot; aria-label=\\&quot;{{ __(&quot;clipboard.copy&quot;) }}\\&quot;&gt;&lt;i class=\\&quot;far fa-copy\\&quot;&gt;&lt;/i&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-center\\&quot;&gt;&quot;, &quot;{{ __(&quot;code&quot;) }}&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-right\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-minimize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-maximize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-close\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;/div&gt;&quot; ].join(&quot;&quot;)); }); $(e).before에서 e가 code block의 내용을 담고 있는 object라는 걸을 유추 할 수 있습니다. 그렇다면 e를 어떻게 지지고 볶으면 원하는 file name을 얻어 낼 수 있지 않을까 해서 조져봤습니다. ./themes/aria/layout/_layout.njk12345678910111213141516171819202122232425262728293031$(document).ready(function () { var cb = null; var els = $(&quot;.post figure.highlight&quot;); if (els.length) { // Enabled Hexo highlight line number. $(els).each(function (i, e) { var codeTitle = &quot;&quot;; var codeContents = e.firstChild.innerText; // codeContents - 1 or file name if (codeContents[0] == 1){ codeTitle = &quot;CMD&quot;; }else{ codeTitle = codeContents } // $(e).before(&quot;&lt;button class=\\&quot;copy button\\&quot;&gt;{{ __(&quot;clipboard.copy&quot;) }}&lt;/button&gt;&quot;); $(e).before([ &quot;&lt;div class=\\&quot;code-titlebar\\&quot;&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-left\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;copy\\&quot; aria-label=\\&quot;{{ __(&quot;clipboard.copy&quot;) }}\\&quot;&gt;&lt;i class=\\&quot;far fa-copy\\&quot;&gt;&lt;/i&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-center\\&quot;&gt;&quot;, codeTitle, &quot;&lt;/div&gt;&quot;, &quot;&lt;div class=\\&quot;titlebar-right\\&quot;&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-minimize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-maximize\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;button class=\\&quot;button-dot dot-close\\&quot; aria-label=\\&quot;Decoration\\&quot;&gt;&lt;/button&gt;&quot;, &quot;&lt;/div&gt;&quot;, &quot;&lt;/div&gt;&quot; ].join(&quot;&quot;)); }); 추가한 코드에 대해 간략히 설명하면 다음과 같습니다 codeTitle - code title이 저장될 변수 codeContents - DOM을 저장할 변수 if 문 - file name이 없다면 codeTitle에 “CMD”를 저장, file name이 없다면 codeTitle에 codeContents(file name)을 저장 &amp;nbsp;css를 적용했던 figcaption tag가 안보이도록 변경하겠습니다. 주의 사항으로는 visibility: hidden 속성을 주면 DOM에도 포함이 안되기 때문에 title bar에도 표시되지 않습니다. css를 다음과 같이 변경합니다. ./themes/aria/source/css/index.styl123figcaption { font-size: 0;} 약간 편법 같지만 원하는 디자인으로 나와줄 것입니다. 원하던 모양으로 code block이 완성되었습니다. 상당히 마음에 듭니다. Epilogue&amp;nbsp;블로그 초기부터 꽤나 고치고 싶었던 부분이였는데 원하는 디자인으로 변경할 수 있어 상당히 뿌듯합니다.","link":"/2020/05/07/%EA%B8%B0%EC%88%A0-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B5%AC%EC%B6%95%EA%B8%B0-6/"},{"title":"hexo 블로그에 댓글창(disqus)을 만들어보자","text":"&amp;nbsp;사회 생활 경험이 많은건 아니지만 해보면서 몇가지 느낀점이 있습니다. 그 중 하나는 입을 다물면 반은 간다입니다. 하지만 왜 댓글창을 만들어서 굳이 말을 더 하려는걸까요? 어째서인지는 모르겠지만 없으면 허전하니 만들어보도록 하겠습니다. Prologue어떤 plugin을 사용할까?&amp;nbsp;우선 hexo가 어떤 댓글창을 지원하는지부터 확인해봐야 합니다. 지원하는 것이 없다면 처음부터 만들어야겠지만 그럴일은 없습니다. Aria에서 사용 가능한 댓글창은 다음과 같습니다. disqus commentjs valine disqus를 사용했습니다. 가장 쉽게 추가할 수 있고 SNS login기능도 있고 깔끔하기 때문입니다. Add Comment&amp;nbsp;이번 작업은 disqus의 계정을 만들고 shortname을 만들어 aria_config에 추가하기만 하면됩니다. disqus page 입니다. GET STARTED를 눌러 시작합시다. I want to install Disqus on my site를 선택합니다. site의 이름과 주제, 언어를 설정해줍니다. 한국어는 지원하지 않으니 영어를 선택했습니다. 저는 돈도 없고 굳이 내가면서 쓸 이유는 없기때문에 Basic을 선택했습니다. I don’t see my platform listed, install manually with Universal Code를 선택해줍니다. 스크롤을 내려서 Configure를 눌러줍시다. Website Name과 URL을 적어줍시다. 톱니바퀴 모양의 Configure your site’s community settings를 클릭합니다. 여기서 _config.yml에 추가해줄 shortname을 확인합니다. 그리고 Appearance부분에 Typeface를 변경해주면 댓글창의 Font를 변경할 수 있습니다. 만약 댓글창에 궁서체가 나온다면 Auto이외의 글꼴을 선택하면 됩니다. ./themes/aria/_config.yml1234# `comment.commentjs.type`: Choose between `github` and `oschina`.comment: enable: true disqus_shortname: colorlion config 파일에 disqus_shortname을 추가합니다. 잘 적용됐습니다. Epilogue&amp;nbsp;이번 포스트에선 별 다른 어려움 없이 진행할 수 있었습니다. 처음 적용할 때 댓글의 폰트가 궁서체로 적용되어 당황했지만 site config에서 변경할 수 있었습니다. 이것으로 오늘의 교훈은 설명서를 잘 읽어보자 였습니다 감사합니다.","link":"/2020/05/12/%EB%B8%94%EB%A1%9C%EA%B7%B8%EC%97%90-%EB%8C%93%EA%B8%80%EC%B0%BD%EC%9D%84-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B3%B4%EC%9E%90/"},{"title":"사회복무요원의 2021년 하반기 목표","text":"2021년이 벌써 반이나 지나갔습니다. 작년 이맘때부터 사회복무요원을 시작했는데 벌써 1년은 개뿔 시간 진짜 안가더라구요. 돌아보니 좀 안타까운 시간이 아니였나 라는 생각이 듭니다. 시간도 많이 낭비했고, 뭐 딱히 한건 없고.. 그래서 이번에 다시 마음을 다잡고 남은 기간동안이라도 준비를 철저히하고자 합니다.현역보다 낫다고는 하지만 20대의 짧지 않은 시간을 끌려간다는 것은… 지난 1년그동안 보안기사도 준비하고, 개발 공부도 좀 했지만 다시 정신을 차리게 된건 얼마 안된 것 같습니다. 지난 1년간 가장 열심히 했던 건 보안기사 시험이였지만 이번 5월 시험은 마음 아프게 떨어지고 말았습니다. 합격자 발표가 나지 않았는데 어떻게 떨어진걸 아냐구요? 감 이란게 있잖아요 내가 준비한건 법 외에 모든걸 했지만 법 만 나왔을때의 기분 참 안타깝다 그죠? 그 외에 운동 조금 하고 게임 많이 하고 흠… 써놓고 보니 진짜로 1년동안 미래를 위해 준비한 것들이 없는 것 보니 마음이 아프네요… 2년 전까지만 해도 대학원생(노예)이였는데.. 어째서 눈물이? 앞으로의 1년언제까지고 과거의 나처럼 살 수는 없으니 이번 하반기부터라도 하나하나 개선해 보는 것이죠하반기 목표는 다음과 같습니다 자격증 취득 AWS-SOLUTIONS-ARCHITECT-ASSOCIATE Azure AZ-500 SQLD(가능하다면 SQLP 까지) 정보보안기사 블로그 1일 1포스팅 알고리즘 공부 영어 공부 공모전 준비 적어놓고보니 참 많은 것 같습니다. 각 항목별로 하루 30분에서 1시간씩 쌓아 간다는 느낌으로 해야 할 것들입니다. 무턱대로 하루 왠종일 잡고있다간 금방 힘들다고 안할게 뻔하죠 뭐 그럼 전 이만 codewars 풀러 가봐야겠습니다. 그럼 이만~","link":"/2021/06/07/%EC%82%AC%ED%9A%8C%EB%B3%B5%EB%AC%B4%EC%9A%94%EC%9B%90%EC%9D%98-2021%EB%85%84-%ED%95%98%EB%B0%98%EA%B8%B0-%EB%AA%A9%ED%91%9C/"},{"title":"KOSA 소프트웨어 기술자 경력관리시스템에서 경력신고를 해보자","text":"무슨 바람이 불어 이런걸 하는 지 의구심이 들기 전에 해두면 좋은거니까 해두도록 합시다. 등록시 수수료 25,000원이 들어가긴 하지만 정부 사업에서 요구하는 경우도 있고, 취득한 자격증이나 경력 사항을 일일히 뽑아서 제출하는 것 보단 편하니까 해보도록 합시다. 소프트웨어 기술자 경력관리시스템에서는 다음과 같은 경력 신고를 제공합니다 근무 경력 기술 경력 학력 기술자격 교육 상훈 KOSA 사이트로 가서 회원 가입 이후 진행합니다 SW기술자 경력 등록SW기술자 경력 확인을 눌러 경력을 등록합니다 등록하고자 하는 경력에 추가 버튼을 눌러 경력을 추가합니다 경력 추가에는 증명 방법을 우편 또는 온라인(사진파일)으로 제출해야 하니 미리미리 준비해두도록 합시다 등록하려는 경력을 체크하고 신청하기 버튼을 누릅니다 이후 등록하려는 경력을 확인하고 본인인증을 진행하면 수수료를 결제합니다 등록을 완료했습니다 미비사항이 없다면 3~5일 이내에 완료됩니다.","link":"/2022/01/31/%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4-%EA%B8%B0%EC%88%A0%EC%9E%90-%EA%B2%BD%EB%A0%A5%EA%B4%80%EB%A6%AC%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%97%90%EC%84%9C-%EA%B2%BD%EB%A0%A5%EC%8B%A0%EA%B3%A0%EB%A5%BC-%ED%95%B4%EB%B3%B4%EC%9E%90/"},{"title":"이 사람이 책을 들고다니는 방법","text":"여러분들은 공부하실때 어떤 매체를 사용해 공부하시나요? 저는 주로 책, 영상으로 사용해 공부합니다. 요즘에 와서야 youtube나 다른 강의들이 많아져 사용하고 있는데 예전엔 책을 가지고 공부했습니다. 예전부터 책을 쓰면서 불편한점이 한두가지가 아니였습니다. 책을 본다고 땅을 보다 모니터를 본다고 앞을 보는 걸 반복하다보면 목이 참 아파왔죠. 책 받침대도 써봤지만 목이 움직이는 것은 변함이 없었죠. 아무튼 의도치 않은 목 운동을 안하려고 대안을 찾던 중 책도 모니터로 보면 되지 않나! 라는 생각이 뇌리에 스쳐지나 갔고 홀린든 Ebook을 찾기 시작했습니다. 외국이야 Ebook이 많긴 하지만 우리나라 Ebook은 책의 종류가 많이 없었습니다. 특히 새로 나온 책들은 거의 없었죠. 아메리카 대륙을 발견한 콜롬버스처럼 발견해 버리고 말았습니다. “북 스캐너”이 제품들을 보고 저는 몹시 기뻐했습니다. 드디어 지긋지긋한 목운동에서 해방인건가? 나도 있어보이는 IT인이 되는 것인가? 하고 말이죠 우선 어떤 스캐너를 사야할지 고민하다가 어차피 책 다시 팔것도 아닌데 시간도 노동력도 많이 사용하는 비파괴 스캐너보단 깔끔하게 작두와 파괴형 스캐너를 구매하기로 했습니다. 스캔은 간단합니다 스캔이 끝나면 전용 소프트웨어에서 관리할 수 있으며 pdf나 jpg 등의 확장자로 저장할 수 있습니다 사용하면서 가장 만족했던 것은 고개를 움직이지 않아도 된다는 것과 책을 들고다니지 않아도 된다는 점입니다. 스캔한 책은 PDF로 변환해 NAS에 저장해 사용하고 있습니다. 스캐너는 약 40~50권의 책을 스캔했지만 스캔 품질의 저하 없이 고르게 스캔되었으며 작두도 잘 잘리고 있습니다. 무엇보다 이중급지 문제가 발생하면 스캐너에서 알려줍니다(책을 잘 자른다면 이중 급지되는 일은 거의 없습니다). 여러분도 지갑이 허락한다면 북 스캐너와 작두 어떠신가요?","link":"/2022/02/07/%EC%9D%B4-%EC%82%AC%EB%9E%8C%EC%9D%B4-%EC%B1%85%EC%9D%84-%EB%93%A4%EA%B3%A0%EB%8B%A4%EB%8B%88%EB%8A%94-%EB%B0%A9%EB%B2%95/"},{"title":"알고리즘 공부, 영어 공부를 한번에 codewars","text":"새내기 컴공 분쇄기, 개발자가 되고싶다면 선택이 아닌 필수로 알아야 하는 것. 단순히 아는 것이 아니라 응용할 수 있어야 하는 것입니다. 하지만 막상 하다보면 자료구조 만드는 것부터 허덕이다가 결국 정렬에서 손 놓게 되는 그런 과목 발등에 불 떨어져 짧은 시간에 뇌 녹여가면서 하는 것 보단 하루에 30분에서 1시간정도 뇌 체조 하는 느낌으로 시작하려고 합니다. 왜 Codewars ?하는 김에 좀 재미있게 공부하고싶기도 했고, 영어공부도 병행할 수 있다는 것이 큰 장점이였습니다.그리고 알고리즘 외에도 다양한 언어로 다양한 문제가 있고, 다른 유저가 제출한 답변을 보면서 내 답변과 무슨 차이가 있는지도 확인할 수 있는 점도 좋은점이라고 생각합니다. Into the war가입우린 전쟁에 참가하는 용병이 됩니다. 그러므로 용병 등록을 해야하죠원하는 언어를 선택하고 등록을 진행합시다매우매우 간단한 문제를 풀고 다음으로 넘어갑니다python 기준으로 문제의 답은 다음과 같습니다 python12def multiply(a, b): return a * b 간단한 입단심사가 끝났으니 메일을 등록합시다.하지만 저는 github 계정이 있으니 그것을 사용하겠습니다이제 퀘스트를 받아 랭크를 높여봅시다","link":"/2021/06/13/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EA%B3%B5%EB%B6%80-%EC%98%81%EC%96%B4-%EA%B3%B5%EB%B6%80%EB%A5%BC-%ED%95%9C%EB%B2%88%EC%97%90-codewars/"},{"title":"인공지능 전문가 자격증 취득 후기","text":"인공지능 전문가 자격증은 한국표준협회에서 주관하는 민간시험으로 한국표준협회 AI 강의를 이수해야 응시 자격이 주어집니다. 저는 한국표준협회 AI 고급과정을 이수했기에 자격이 생겨 응시하게 되었습니다. 자격증 시험은 엘리스 플랫폼을 사용해 온라인으로 진행되었습니다 교육 과정교육은 약 60일 동안 진행되었고, 교육 시간은 평일 6시 30분 부터 10시까지 진행되었습니다. 수업은 엘리스 플랫폼을 사용한 실시간 온라인 강의로 강사님께서 강의를 하시고, 질문을 받는 형식이였습니다. 강의 난이도는 처음하는 사람도 따라 할 수 있고 이해할 수 있는 난이도로 진행되었습니다. 강의 자료는 pdf로 공유해주시고, 교과서로 사용된 책을 집으로 보내주셔서 강의가 끝나고 교과서로 배웠던 내용을 복습하거나 실습할 수 있었습니다. 자격증 후기인공지능 전문가 자격증 시험의 문제는 객관식으로 출제되었고 제한시간은 60분이였습니다. 난이도는 강의를 들으면 누구나 풀 수 있는 정도의 문제였습니다. 사회 복무 요원을 하면서 양질의 강의도 듣고 자격증 까지 얻을 수 있었습니다.","link":"/2022/02/01/%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-%EC%A0%84%EB%AC%B8%EA%B0%80-%EC%9E%90%EA%B2%A9%EC%A6%9D-%EC%B7%A8%EB%93%9D-%ED%9B%84%EA%B8%B0/"},{"title":"[정보보안기사]1. 정보보호 개요","text":"보안용어 정리자산조직이 보호 해야 할 대상 취약점정보 시스템, 정보보호 시스템의 결함 또는 손실(위협의 위험 대상) 위협결함 또는 손실의 원인이 될 가능성을 제공하는 환경의 집합 위험(자산 x 위협 x 취약점)취약점을 활용할 수 있는 가능성 정보보호개념정보의 수집, 가공, 저장, 검색, 송신, 수신 중에 발생하는 정보의 훼손 변조, 유출 등을 방지하기 위한 관리적, 기술적 수단 또는 그러한 수단으로 이루어지는 행위기밀성, 무결성, 가용성, 인증성 및 부인방지를 보장하기 위하여 기술적, 관리적, 물리적 보호대책을 수립하는 것이다 정보의 가용성과 안전성정보의 활용과 통제 사이를 조율하는 행위, 가용성을 극대화 하고 위협 요소를 줄이고 안전성을 극대화 하기위해 통제해야 한다 목표기밀성(Confidentiality)인가(Authorized)된 사람, 프로세스, 시스템 만이 알 필요성(Need to Know)에 근거해 시스템에 접근해야 한다 허가받지 않은 정보 유출을 예방하기 위해 접근 통제, 암호화 수행 보안 등급(Security Label)을 부여 기밀성을 보장하기 위한 기술 접근제어, 암호화, 보안 인식 교육 기밀성 공격 방식 Sniffing, 트래픽 분석 무결성(Integrity)데이터가 불법적으로 생성, 변경, 삭제도지 않도록 보호해야 한다무결성을 보장하기 위한 보안기술 접근제어, 메시지 인증, 디지털 서명, Hash 무결성 공격 방법 MITM(Man in the Middle) Attack, Phising, Farming, 과도한 권한 집중 등 피싱: 위장된 홈페이지로 접속을 유도해 개인정보를 탈취 파밍: 피싱의 한 종류, DNS Spoofing이라고 불리며 정당한 URL을 입력해도 가짜 사이트로 이동 가용성(Availability)시스템이 지체 없이 동작하도록 하고, 모든 서비스 사용자가 서비스를 거절당하지 않고 사용하는 것가용성 보장 기술 데이터 백업, 이중화 구성, 물리적 위험 요소로부터 보호 등 가용성 공격 방식 DDoS, DoS 인증성(Authentication)송신자의 메시지의 출처, 데이터 정보가 신뢰할 수 있는지 확인할 수 있는 것 책임추적성(Accountability)주체의 행동을 추적해서 찾아낼 수 있어야 한다.주체가 잘못을 한 이후에 부인 방지를 할 수 없도록 한다. 디지털 서명, 포렌식, 디지털 워터마킹, 핑거 프린팅, 인증서 등을 활용 정보보호 관리 기술적 보호대책데이터를 보호하기 위한 가장 기본적인 대책 접근통제, 암호기술, 백업, 보안성이 강화된 소프트웨어 사용 등 물리적 보호대책자연 재해로부터 정보시스템을 보호하기 위한 대책 출입통제, CCTV, 잠금장치, 생체 인증 등 관리적 보호대책위험 분석 및 감사를 시행해 정보시스템의 안정성과 신뢰성을 확보하기 위한 대책 보안인식 교육, 직무 분리, 감사 증적 등 정보보호 공격유형Passive(수동적) Attack시스템 자원에는 영향을 끼치지 않는 공격 스누핑, 트래픽 분석 정보를 수집하는 것이 목적 탐지 보단 예방이 중요 Active(능동적) Attack시스템 자원에 영향을 끼치는 공격 수정, 삭제, 삽입 대부분 수동적 공격을 통해 얻은 정보를 바탕으로 공격 예방보단 탐지가 중요 변조(Modification)원래의 데이터를 조작하는 행위 가로채기(Interception)Sniffing 차단(Interruption)정상적인 서비스를 방해하는 것 DDoS, DoS 사이버 대피소 KISA에서 운영하는 서비스로 DOS 공격 트래픽을 우회 시켜주는 서비스 위조(Fabrication)상대방을 속여버리는 것 시점 별 통제예방통제(능동적 통제)사전에 위협과 취약점에 대처하는 통제 FDS, 방화벽, 보안 인식 교육 탐지 통제위협을 탐지하는 통제 IDS, CCTV, 감사 로그 교정통제이미 탐지된 위협이나 취약점에 대처하거나 위협이나 취약점을 감소시키는 통제 데이터 복구, 백업, BCP/DRP, 백신(예방부터 교정까지 가능)","link":"/2022/02/09/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88%EA%B8%B0%EC%82%AC1-%EC%A0%95%EB%B3%B4%EB%B3%B4%ED%98%B8-%EA%B0%9C%EC%9A%94/"},{"title":"[정보보안기사]2. 접근통제","text":"접근통제구성 요소식별(Identification)사용자 ID를 확인하는 과정 root, admin, system, sys net localgroup administrators 인증(Authentication)사용자가 맞음을 시스템이 인정하는 것 인가(Authorization)파일을 읽고, 쓰고, 실행시킬 수 있는 권한을 부여 접근통제 원칙최소 권한의 원칙권한의 남용을 방지하기 위함 직무 분리의 원칙보안관리자와 감사, 개발자와 운영자 devops는 직무분리가 안된게 아니다 접근통제 기술 정책MAC(강제적 접근통제): 관리자에 의해 권한 할당DAC(자율적 접근통제): 객체의 소유자에 의해 권한 할당RBAC(역할기반 접근통제): 사용자의 역할에 따라 권한 할당하드닝: 여러가지 설정으로 공격으로부터 시스템을 안전하게 지키는 방법 접근통제 모델Bell-Lapadula(BLP) – MAC 모델기밀성을 강조한 모델, 높은 등급의 정보가 낮은 등급으로 유출 방지 No Read Up, No Write Down 규칙 No Read-up(단순 보안규칙): 주체는 자신보다 높은 보안 등급의 객체를 읽을 수 없음 No Write-Down(* 스타 보안규칙): 주체는 객체보다 높거나 동일해야 객체를 수정할 수 있음 Biba무결성을 위한 모델(BLP를 보완) No Read Down, No Write Up 클락-윌슨무결성 중심, 최초의 상업용 모델","link":"/2022/02/10/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88%EA%B8%B0%EC%82%AC2-%EC%A0%91%EA%B7%BC%ED%86%B5%EC%A0%9C/"}],"tags":[{"name":"certificate","slug":"certificate","link":"/tags/certificate/"},{"name":"SQL","slug":"SQL","link":"/tags/SQL/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"google","slug":"google","link":"/tags/google/"},{"name":"google analytics","slug":"google-analytics","link":"/tags/google-analytics/"},{"name":"markdown","slug":"markdown","link":"/tags/markdown/"},{"name":"blog","slug":"blog","link":"/tags/blog/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"node.js","slug":"node-js","link":"/tags/node-js/"},{"name":"code block","slug":"code-block","link":"/tags/code-block/"},{"name":"disqus","slug":"disqus","link":"/tags/disqus/"},{"name":"assay","slug":"assay","link":"/tags/assay/"},{"name":"KOSA","slug":"KOSA","link":"/tags/KOSA/"},{"name":"경력관리","slug":"경력관리","link":"/tags/%EA%B2%BD%EB%A0%A5%EA%B4%80%EB%A6%AC/"},{"name":"book","slug":"book","link":"/tags/book/"},{"name":"scanner","slug":"scanner","link":"/tags/scanner/"},{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"},{"name":"AI","slug":"AI","link":"/tags/AI/"},{"name":"정보보안기사","slug":"정보보안기사","link":"/tags/%EC%A0%95%EB%B3%B4%EB%B3%B4%EC%95%88%EA%B8%B0%EC%82%AC/"}],"categories":[{"name":"certificate","slug":"certificate","link":"/categories/certificate/"},{"name":"android","slug":"android","link":"/categories/android/"},{"name":"기술블로그 운영기","slug":"기술블로그-운영기","link":"/categories/%EA%B8%B0%EC%88%A0%EB%B8%94%EB%A1%9C%EA%B7%B8-%EC%9A%B4%EC%98%81%EA%B8%B0/"},{"name":"markDown","slug":"markDown","link":"/categories/markDown/"},{"name":"plan","slug":"plan","link":"/categories/plan/"},{"name":"경력관리","slug":"경력관리","link":"/categories/%EA%B2%BD%EB%A0%A5%EA%B4%80%EB%A6%AC/"},{"name":"etc","slug":"etc","link":"/categories/etc/"},{"name":"codewars","slug":"codewars","link":"/categories/codewars/"}]}